
trigger validationTriggerDemo on Case (before insert, before update,after insert,after update) {
    if(Costsaving_Recursive.Afterupdaterecursive){
        
        // BEFORE INSERT and BEFORE UPDATE
        
        if(Trigger.isBefore && (Trigger.isInsert || Trigger.isUpdate)){
            if (Trigger.isInsert) {
                CaseTriggerhandler.doNotBillCase(Trigger.New);
                //change name format to capitalize
                Demo_Case_Handler.capitalizeName(Trigger.New);
                //The below helper class is used to update the partner field based on Treating Physician State
                Demo_Cas_PartnerUpdateHelper.identifyPartner(Trigger.new, null,'Before Insert');
                Demo_Case_Handler.set_Balu_EAR_APO_Timestamps(Trigger.new, Trigger.oldMap);        
               new PhysicianAssignmentHelper().assignPhysicianByPrimarySignal(Trigger.New);
                
                // Testing start Dt: 07-06-22
                //Demo_Case_Handler.beforeInsertcasesforSameMember(Trigger.New);
                // Testing End Dt:
            	
            }
            
            //The following code sets Demo Review Due Date considering Records Procurement Completed Date Time
            if (Trigger.isUpdate) {

                //The below helper class is used to update the partner field based on Treating Physician State
                Demo_Cas_PartnerUpdateHelper.identifyPartner(Trigger.new, Trigger.old,'Before Update'); 
                Demo_CasAPOservice_PatientValidation.checkPatientInfoValidation(Trigger.new); 
                //change name format to capitalize
                Demo_Case_Handler.capitalizeName(Trigger.New);
                //For Grail Updated fields
                Demo_Case_Handler.getUpdatedField(Trigger.new,Trigger.oldMap);
                Demo_Case_Handler.set_BaluTimestamps(Trigger.new, Trigger.oldMap);  
                Demo_Case_Handler.setAHReviewDueDateAndPortalDueDate(Trigger.new);              

            }
            
            //following code is to calculate the days b/w records and report sent
            Demo_Case_Handler.AH_Records_and_ReportSent(Trigger.New);
            Demo_Case_Handler.AH_New_and_ReportSent(Trigger.New);
            
            // testing--
            // Not sure why there are two IF clauses for isUpdate.

            if(Trigger.isUpdate){
                List<Case> vListEARCases00 = new List<Case>();
                List<Case> vListEARCases0 = new List<Case>();
                List<Case> vListEARCases1 = new List<Case>();
                List<Case> vListEARCases2 = new List<Case>();
                List<Case> vListEARCases3 = new List<Case>();
                List<Case> vListEARCases4 = new List<Case>();
                List<Case> vListEARCases5 = new List<Case>();
                List<Case> vListAPOCases = new List<Case>();
                
                for(Case vCase : Trigger.new){
                    if(vCase.RecordTypeId==Schema.SObjectType.Case.getRecordTypeInfosByName().get('EAR').getRecordTypeId())
                    {
                        if(vCase.status=='Procurement'){
                            vListEARCases00.add(vCase);
                            Demo_Case_Handler.setBaluEARRecordsProcurement(vListEARCases00);
                        }
                        if(vCase.status=='Narration'){
                            vListEARCases1.add(vCase);
                            Demo_Case_Handler.setAHEARClinicalNarration(vListEARCases1);
                        }
                        if(vCase.status=='PhyReview'){
                            vListEARCases2.add(vCase);
                            Demo_Case_Handler.setBaluEARPhysicianReviewPhysicianReviewRecordtype(vListEARCases2);
                        }
                        if(vCase.status=='PToP'){
                            vListEARCases3.add(vCase);
                            Demo_Case_Handler.setAHEARPhysicianReviewPhysicianP2PReviewRecordtype(vListEARCases3);
                        }
                        if(vCase.status=='Outcomes'){
                            vListEARCases4.add(vCase);
                            Demo_Case_Handler.setBaluEAROutcomes(vListEARCases4);
                        }
                        if(vCase.status=='Closed'){
                            vListEARCases5.add(vCase);
                            Demo_Case_Handler.setBaluEARClosed(vListEARCases5);
                        }
                    }
                    if(vCase.RecordTypeId==Schema.SObjectType.Case.getRecordTypeInfosByName().get('APOCustomer').getRecordTypeId()){
                        vListAPOCases.add(vCase);
                        Demo_Case_Handler.setBaluAPOCustomerRecordsprocurment(vListAPOCases);
                        Demo_Case_Handler.setBaluAPOCustomerClinicalNarration(vListAPOCases);
                        Demo_Case_Handler.setBaluAPOCustomerPhysicianReviewPhysicianReviewRecordtype(vListAPOCases);
                        Demo_Case_Handler.setBaluAPOCustomerPhysicianReviewP2PReviewRecordtype(vListAPOCases);
                        Demo_Case_Handler.setBaluAPOCustomerOutcomes(vListAPOCases);
                        Demo_Case_Handler.setBaluAPOCustomerClosed(vListAPOCases);
                    }

                    if(vCase.RecordTypeId==Schema.SObjectType.Case.getRecordTypeInfosByName().get('Consult').getRecordTypeId() && (Trigger.isUpdate && Trigger.isBefore)){
                        Balu_Case_Consult_Handle.validateConsultStatus(Trigger.new);
                        Balu_Case_Consult_Handle.ConsultreviewDuedate(Trigger.New);
                        
                    }
                    
                    if(vCase.RecordTypeId==Schema.SObjectType.Case.getRecordTypeInfosByName().get('Posttest').getRecordTypeId() && (Trigger.isUpdate && Trigger.isBefore)){
                        Demo_Case_GRCustomer_Validations.validateGrailStatus(Trigger.new);   
                    }
                } 
            }
            // Reset to allow normal GUI operations.
            Demo_Case_Handler.resetBaluNFlag(Trigger.new);
            
        }
/*--------------------------------------------------------------------------------------
********************************* After Trigger ****************************************
--------------------------------------------------------------------------------------*/
        if(Trigger.isInsert && Trigger.isAfter || Trigger.isUpdate && Trigger.isAfter ){         
            //Case assignment logic
             
            if(Trigger.isAfter && Trigger.isUpdate ){
            if(AfterUpdateRecursiveHandler_CLS.isFirstTime || Test.isRunningTest())
                {                       
                    AfterUpdateRecursiveHandler_CLS.isFirstTime = false;
                    Demo_Cas_AssignPartnersHelperV1.caseAssignmentController(Trigger.new, Trigger.oldmap);
                }
            }
            
            if(Trigger.isAfter && Trigger.isInsert ){
                Demo_Case_Handler.afterInsertCasesforSameMember(Trigger.New);
            }
            
        }
        
        if(Trigger.isBefore & Trigger.isUpdate){
            
            Demo_Case_Handler.updateTurnAroundTime(Trigger.new);
                        
            Demo_Case_Handler.setTurnAroundTime(Trigger.new);
        }
        
        
    }
}
